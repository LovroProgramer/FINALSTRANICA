import cryptography
import socket 
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding


private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)
private_key_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.BestAvailableEncryption(b'1234')
)

public_key = private_key.public_key()
public_key_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.PKCS1
)



sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(('localhost',5000))

public_server_key_pem = sock.recv(1024)
public_server_key = serialization.load_pem_public_key(public_server_key_pem)

while(1):
    pozdrav = input("Unesi poruku: ")
    podaci = pozdrav.encode()
    cipher = public_server_key.encrypt(
    podaci,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
        )

    )
    sock.send(cipher)
    print(podaci)
    if pozdrav=='q':
        break
sock.close()   


import cryptography
import socket 
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import padding

private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
)

private_key_pem = private_key.private_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PrivateFormat.PKCS8,
    encryption_algorithm=serialization.BestAvailableEncryption(b'1234')
)

public_key = private_key.public_key()

public_key_pem = public_key.public_bytes(
    encoding=serialization.Encoding.PEM,
    format=serialization.PublicFormat.PKCS1
)



sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind(('localhost',5000))
sock.listen(1)
clisock,addr = sock.accept()
clisock.send(public_key_pem)

while(1):
    podaci = clisock.recv(1024)
    if not podaci:
        break
    pozdrav = private_key.decrypt(
        podaci,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    print(pozdrav.decode())
clisock.close()
sock.close()